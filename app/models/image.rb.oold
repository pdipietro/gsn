class Image 
  include Neo4j::ActiveNode
  include Neo4jrb::Paperclip


  has_neo4jrb_attached_file :attachment, 
                             @properties


  def initialize(mode, field_name, class_name)

    @properties = format(class_name,field_name)

    if mode == :one
      has_one  :out, field_name, rel_class: HasImage
    else
      has_many :out, field_name, rel_class: HasImage
    end
  end

  def format class_name, field_name

    sizes = {
        :btn         => ['36x36#',     :jpg, :quality => 70],              # user_btn
        :thumb       => ['96x96#',     :jpg, :quality => 70],              # generic thumb (user, post, group, etc.)
        :icon        => ['128x128#',   :jpg, :quality => 70],              # user_icon on left column
        :profile     => ['200x200#',   :jpg, :quality => 70],              # generic profile (user, post, group, etc)
        :original    => ['250>',       :jpg, :quality => 70],              # original image resized
        :banner      => ['854>',       :jpg, :quality => 70],              # banner for generic profile
        :preview     => ['200x400#',   :jpg, :quality => 70],              # preview for post
        :logo        => ['200x150>',   :jpg, :quality => 70],              # social network logo on a generic page

        :xxlarge     => ['5120x1600>', :jpg, :quality => 70],              # landing page header
        :xlarge      => ['2560x800>',  :jpg, :quality => 70],              # landing page header
        :large       => ['1280x400>',  :jpg, :quality => 70],              # landing page header
        :medium      => ['640x200>',   :jpg, :quality => 70],              # landing page header
        :small       => ['320x100>',   :jpg, :quality => 70],              # landing page header
        :xsmall      => ['320x100>',   :jpg, :quality => 70],              # landing page header

        :retina      => ['1200>',      :jpg, :quality => 30]               # resize for retina display
      }

    classes = {
      :User           => {
                           :avatar        => [:original, :btn, :thumb, :icon, :profile], 
                           :currentAvatar => [:original, :btn, :thumb, :icon, :profile], 
                           :image         => [:original, :preview]
                         },            
      :Group          => {
                           :logo          => [:original, :btn, :thumb, :icon, :profile], 
                           :header        => [:original, :btn, :thumb, :icon, :profile]
                         },
      :Post           => {
                           :logo          => [:original, :btn, :thumb, :icon, :profile], 
                           :header        => [:original, :banner, :preview]
                         },
      :SocialNetwork  => {
                           :logo          => [:original, :logo, :btn, :icon]    
                         },
      :LandingPage    => {
                           :header        => [:xsmall, :small, :medium, :large, :xlarge, :xxlarge],        
                           :logo          => [:original, :logo]      
                         }
      }

      convert_options = {
        :std              => '-set colorspace sRGB -strip',
        :retina           => '-set colorspace sRGB -strip -sharpen 0x0.5'
      }

    styles = Hash.new
    convert = Hash.new

    classes[class_name][field_name].each do |k|
      styles[k] = sizes[k] 
      convert[k] = k == :retina ? convert_options[k] : convert_options[:std]
    end

    " :path => ':rails_root/public/system/:attachment/:id/:basename_:style.:extension',
      :url => '/system/:attachment/:id/:basename_:style.:extension',
      :styles => #{styles},
      :convert_options => #{convert}
      validates_attachment_content_type :attachment, content_type: ['image/jpg', 'image/jpeg', 'image/png', 'image/gif']
      validates_attachment_size :#attachment, :less_than_or_equal_to => 4.megabytes "

  end


end


