- require 'base64'
- if post.errors.count == 0
  - rels = count_relationships(post)
  %div
    - arr = Array.new
    - arr << post.image0 unless post.image0.length == 0  
    - arr << post.image1 unless post.image1.length == 0  
    - arr << post.image2 unless post.image2.length == 0  
    - arr << post.image3 unless post.image3.length == 0  
    - arr << post.image4 unless post.image4.length == 0  
    - image_cnt = arr.length

    -# *********************************** POST IMAGES ****************************************** 
    .post{ :id => post.uuid }
      .relative
        - case image_cnt
          - when 0
            .solida-background
          - when 1
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[0].to_s) ), :remote => :true, :method => :post do
              = image_tag arr[0].url(:post), :class => "img-c0"
          - when 2
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[0].to_s) ), :remote => :true, :method => :post do
              = image_tag arr[0].url(:post_sq), :class => "img-c1"
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[1].to_s) ), :remote => :true, :method => :post do
              = image_tag arr[1].url(:post_sq), :class => "img-c1"
          - when 3
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[0].to_s) ), :remote => :true, :method => :post do
              = image_tag arr[0].url(:post_sq), :class => "img-c1"
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[1].to_s) ), :remote => :true, :method => :post do
              = image_tag arr[1].url(:post_s), :class => "img-c2"
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[2].to_s) ), :remote => :true, :method => :post do
              = image_tag arr[2].url(:post_s), :class => "img-c2"
          - when 4
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[0].to_s) ), :remote => :true, :method => :post do
              = image_tag arr[0].url(:post_s), :class => "img-c2"
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[1].to_s) ), :remote => :true, :method => :post do
              = image_tag arr[1].url(:post_s), :class => "img-c2"
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[2].to_s) ), :remote => :true, :method => :post do
              = image_tag arr[2].url(:post_s), :class => "img-c2"
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[3].to_s) ), :remote => :true, :method => :post do
              = image_tag arr[3].url(:post_s), :class => "img-c2"  
          - when 5
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[0].to_s) ), :remote => :true, :method => :post do
              = image_tag arr[0].url(:post_sq), :class => "img-c1"
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[1].to_s) ), :remote => :true, :method => :post do
              = image_tag arr[1].url(:post_sq), :class => "img-c3"
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[2].to_s) ), :remote => :true, :method => :post do
              = image_tag arr[2].url(:post_sq), :class => "img-c3"
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[3].to_s) ), :remote => :true, :method => :post do
              = image_tag arr[3].url(:post_sq), :class => "img-c3"
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[4].to_s) ), :remote => :true, :method => :post do
              = image_tag arr[4].url(:post_sq), :class => "img-c3"
        = render partial: 'users/owner', locals: { object: post, type: "owner", title: "owner details" }


      -# *********************************** POST CONTENT ****************************************** 
      .border-1
      .content
        - if post.content.length > 300
          .first-part.collapse.in{ :name => "post_content_full_#{post.uuid}"}
            = post.content[0...300]
            %a.toggle{ :type => "toggle", "data-target" => "div[name=post_content_full_#{post.uuid}]", "data-toggle" => "collapse"}
              %i.header-dropdown.im-about
              %span{ :style => "color: #{current_social_network_background_color?};" }= " ... more"
          .full-part.collapse{ :name => "post_content_full_#{post.uuid}"}
            %a.toggle{ :type => "toggle", "data-target" => "div[name=post_content_full_#{post.uuid}]", "data-toggle" => "collapse"}
              = post.content
        - else
          %span= post.content[0...300]

      -# *********************************** COMMAND LINE ****************************************** 

      .spacer
      %div
        .command-line-s{ :style => "sborder: 1px dotted blue; "}
          = link_to onerel_path(post,'Post','likes'), :method => :post, :remote => :true, :title => "Smile", :class => ("hoverable") do
            = "Smile"
          = link_to dummy_path(post,'Post','likes'), :method => :post, :remote => :true, :title => "Share", :class => ("hoverable") do
            = "Share"
          = link_to onerel_path(post,'Post','preferes'), :method => :post, :remote => :true, :title => "Preferreds", :class => ("hoverable") do
            = "Preferred"
          
        .command-line-s.to-right{ :style => "sborder: 1px solid red; "}
          - puts (rels)
          = link_to dummy_path(post,'Post','likes'), :remote => :true, :title => "Likes", :class => ("hoverable") do
            %i.hoverable.im-like
            = rels["in-follows-User"].nil? ? 0 : rels["in-follows-User"]
          = link_to dummy_path(post,'Post','likes'), :remote => :true, :title => "Shares", :class => ("hoverable") do
            %i.hoverable.im-share2
            = rels["in-follows-User"].nil? ? 0 : rels["out-follows-User"]
          = link_to dummy_path(post,'Post','preferes'), :remote => :true, :title => "Preferreds", :class => ("hoverable") do
            %i.hoverable.im-bookmarks
            = rels["in-preferes-User"].nil? ? 0 : rels["in-preferes-User"]

      -# *********************************** POST COMMENT LINE ****************************************** 

      = puts "-----------------------has_comment#: #{post.has_comment.count} #{post.has_comment}"
      - post.has_comment.each do |rel|
        = render partial: "post_comments/show", locals: { post_comment: rel }

      .border-1
      = render partial: "post_comments/form", locals: { post_comment: PostComment.new, post: post }
