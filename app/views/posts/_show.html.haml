- require 'base64'
- if post.errors.count == 0
  - rels = count_relationships(post)
  %div
    - sizes = { :full => ":height => 300, :width => 400", :sq => ":height => 150, :width => 200", :s => ":height => 75, :width => 200" }
    - arr = Array.new
    - arr << post.image0.sub(/\.\w$/,'') unless post.image0.nil?  
    - arr << post.image1.sub(/\.\w$/,'') unless post.image1.nil?  
    - arr << post.image2.sub(/\.\w$/,'') unless post.image2.nil?  
    - arr << post.image3.sub(/\.\w$/,'') unless post.image3.nil?  
    - arr << post.image4.sub(/\.\w$/,'') unless post.image4.nil? 
    -#name[/v[0-9]*[^#]*/]
  
    - image_cnt = arr.length

    -# *********************************** POST IMAGES ****************************************** 
    .post{ :id => post.uuid }
      .relative
        - case image_cnt
          - when 0
            .solida-background
          - when 1
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[0].to_s) ), :remote => :true, :method => :post do
              = cl_image_tag arr[0], :crop => :fill, :fetch_format => :auto, :class => "img-c0"
          - when 2
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[0].to_s) ), :remote => :true, :method => :post do
              = cl_image_tag arr[0], :class => "img-c1", :crop => :fill, :fetch_format => :auto, :gravity => :center, :height => 400, :width => 400
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[1].to_s) ), :remote => :true, :method => :post do
              = cl_image_tag arr[1], :class => "img-c1", :crop => :fill, :fetch_format => :auto, :gravity => :center, :height => 400, :width => 400
          - when 3
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[0].to_s) ), :remote => :true, :method => :post do
              = cl_image_tag arr[0], :class => "img-c1", :crop => :fill, :fetch_format => :auto, :gravity => :center, :height => 400, :width => 400
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[1].to_s) ), :remote => :true, :method => :post do
              = cl_image_tag arr[1], :class => "img-c2", :crop => :fill, :fetch_format => :auto
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[2].to_s) ), :remote => :true, :method => :post do
              = cl_image_tag arr[2], :class => "img-c2", :crop => :fill, :fetch_format => :auto
          - when 4
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[0].to_s) ), :remote => :true, :method => :post do
              = cl_image_tag arr[0], :class => "img-c2", :crop => :fill, :fetch_format => :auto
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[1].to_s) ), :remote => :true, :method => :post do
              = cl_image_tag arr[1], :class => "img-c2", :crop => :fill, :fetch_format => :auto
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[2].to_s) ), :remote => :true, :method => :post do
              = cl_image_tag arr[2], :class => "img-c2", :crop => :fill, :fetch_format => :auto
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[3].to_s) ), :remote => :true, :method => :post do
              = cl_image_tag arr[3], :class => "img-c2"  
          - when 5
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[0].to_s) ), :remote => :true, :method => :post do
              = cl_image_tag arr[0], :class => "img-c1", :crop => :fill, :fetch_format => :auto, :gravity => :center, :height => 400, :width => 400
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[1].to_s) ), :remote => :true, :method => :post do
              = cl_image_tag arr[1], :class => "img-c3", :crop => :fill, :fetch_format => :auto, :gravity => :center, :height => 200, :width => 200
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[2].to_s) ), :remote => :true, :method => :post do
              = cl_image_tag arr[2], :class => "img-c3", :crop => :fill, :fetch_format => :auto, :gravity => :center, :height => 200, :width => 200
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[3].to_s) ), :remote => :true, :method => :post do
              = cl_image_tag arr[3], :class => "img-c3", :crop => :fill, :fetch_format => :auto, :gravity => :center, :height => 200, :width => 200
            = link_to show_image_path( img: UrlSafeBase64.encode64(arr[4].to_s) ), :remote => :true, :method => :post do
              = cl_image_tag arr[4], :class => "img-c3", :crop => :fill, :fetch_format => :auto, :gravity => :center, :height => 200, :width => 200
        = render partial: 'subjects/owner', locals: { object: post, type: "owner", title: "owner details", :profile => :basic }

      -# *********************************** POST CONTENT ****************************************** 
      .border-1
      .content
        - if post.content.length > 300
          .first-part.collapse.in{ :name => "post_content_full_#{post.uuid}"}
            = post.content[0...300]
            %a.toggle{ :type => "toggle", "data-target" => "div[name=post_content_full_#{post.uuid}]", "data-toggle" => "collapse"}
              %i.header-dropdown.im-about
              %span{ :style => "color: #{current_social_network_background_color?};" }= " ... more"
          .full-part.collapse{ :name => "post_content_full_#{post.uuid}"}
            %a.toggle{ :type => "toggle", "data-target" => "div[name=post_content_full_#{post.uuid}]", "data-toggle" => "collapse"}
              = post.content
        - else
          %span= post.content[0...300]

      -# *********************************** COMMAND LINE ****************************************** 

      .spacer 
      %div
        .command-line-s
          = link_to onerel_path(post,'Post','likes'), :method => :post, :remote => :true, :title => "Smile", :class => ("hoverable") do
            = rels["in-likes-me"].nil? ? "Smile" : "Not smile"
          = link_to dummy_path(post,'Post','likes'), :method => :post, :remote => :true, :title => "Share", :class => ("hoverable") do
            = "Share"
          = link_to onerel_path(post,'Post','preferes'), :method => :post, :remote => :true, :title => "Preferreds", :class => ("hoverable") do
            = rels["in-preferes-me"].nil? ? "Preferred" : "Not preferred"
          
        .command-line-s.to-right
          - puts (rels)
          = link_to subjects_list_path('Post',post.uuid,'likes'), :remote => :true, :title => "Likes", :class => ("hoverable") do
            %i.hoverable.im-like
            = rels["in-likes-Subject"].nil? ? 0 : rels["in-likes-Subject"]
          = link_to subjects_list_path('Post',post.uuid,'shares'), :remote => :true, :title => "Shares", :class => ("hoverable") do
            %i.hoverable.im-share2
            = rels["in-follows-Subject"].nil? ? 0 : rels["out-follows-Subject"]
          = link_to subjects_list_path('Post',post.uuid,'preferes'), :remote => :true, :title => "Preferreds", :class => ("hoverable") do
            %i.hoverable.im-bookmarks
            = rels["in-preferes-Subject"].nil? ? 0 : rels["in-preferes-Subject"]

      -# *********************************** POST COMMENT LINE ****************************************** 

      = puts "-----------------------has_comment#: #{post.has_comment.count} #{post.has_comment}"
      - post.has_comment.each do |rel|
        = puts "+++++++++++++ rel: #{rel}"
        = render partial: "post_comments/show", locals: { post_comment: rel }

      .border-1
      = render partial: "post_comments/form", locals: { post_comment: PostComment.new, post: post }

      