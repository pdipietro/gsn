- unless defined?(local_current_subject)
  - className = object.class.name
  - q = "match (o:#{className} { uuid : '#{object[:uuid]}' })<-[rel:owns]-(u:Subject)-[p:has_profile]->(up:SubjectProfile) return u, up"
  - puts "query: #{q}"
  - query = Neo4j::Session.query(q)
  - subject = query.first[:u] 
  - subject_profile = query.first[:up]

- title = defined?(title) ? title : "Edit"

- size = :thumb unless defined?(size)

= puts "subject: #{subject.first_name} #{subject.last_name}"
= puts "size: #{size} -------"
= puts "subject_profile: #{subject_profile.photo}"

- if defined?(local_current_subject)
  = render partial: "subject_profiles/photo_show", locals: { :subject_profile => subject_profile, :size => :basic, :shape => "responsive circle" }
- elsif defined?(show)
  = render partial: "subject_profiles/photo_show", locals: { :subject_profile => subject_profile, :header => :basic, :shape => "responsive circle padding-1" }
- elsif defined?(type)
  %span{ :class => "semi-transparent-#{type}-bar", :style => "clear: both;" }
  %div.solida
    = link_to subject_profile_path(subject.has_profile.uuid), :remote => :true, :title => title, :shape => ("hoverable white") do
      = render partial: "subject_profiles/photo_show", locals: { :subject_profile => subject_profile, :size => size, :shape => "circle padding-1" }
      %span.vertical-middle= "#{subject.full_name} (@#{subject.nickname})"
    %span.to-right.vertical-middle
      = "created on #{object.created_at.to_formatted_s(:short)}"
- else
  %span
    = link_to subject_profile_path(subject.has_profile.uuid), :remote => :true, :title => title, :class => ("hoverable") do
      = render partial: "subject_profiles/photo_show", locals: { :subject_profile => subject_profile, :size => :btn, :shape => "circle padding-1" }
      = "#{subject.full_name} (@#{subject.nickname})"


-# = render partial: 'subjects/owner', locals: { object: post, type: "owner", title: "owner details", :profile => :basic }
