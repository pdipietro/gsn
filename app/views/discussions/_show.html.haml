- if logged_in?
  -# unless discussion.type == "secret" and is_admin? == false
  - puts "discussion.belongs_to: #{discussion.belongs_to.class.name}"
  - group = discussion.belongs_to.class.name == "Group" ? discussion.belongs_to : nil
  - style = group.nil? ? '' : "border-color: #{group.background_color};"
  - show_group = false unless defined?(show_group)        
  - show_social = false unless defined?(show_social)  
  .discussion{:id => discussion.uuid }
    - rels = count_relationships(discussion)
    - if show_group 
      = render partial: "groups/owner", locals: { group: group }
    .spacer

    .owner
      = render partial: "subjects/owner", locals: { object: discussion, creation_date: :true }
      %span.to-right
        = discussion.created_at.to_formatted_s(:rfc822)
    .spacer

    = link_to discussion_path(discussion.uuid), :remote => :true, :title => "View details", class: "hoverable" do
      .row.relative{ :style => "background-color: #f5f5f5; " }
        .col-xs-41
          .content
            .title= discussion.title
        .col-xs-19
          -#.to-right
            - if discussion.header.length == 0 
              .discussion-image-replacement{:style => "background-color: #{discussion.background_color}; " }
            - else  
              = image_tag discussion.header.url(:xxs_header)
            .command-button.to-right
              - if false
                = link_to dummy_path(discussion,'Discussion','likes'), :remote => :true, :title => "add to preferites" do
                  %i.im-preferred.im-20x
              - else
                = link_to dummy_path(discussion,'Discussion','likes'), :remote => :true, :title => "remove from preferites" do
                  %i.im-not-preferred.im-20x{ :style => "color: #{super_social_network_background_color};" }
      .spacer{ :style => "background-color: #f5f5f5; " }
      .row.relative{ :style => "background-color: #f5f5f5; " }
        .content
          = discussion.description

    .spacer
    %div
      .command-line-s
        = link_to onerel_path(discussion,'Discussion','likes'), :method => :post, :remote => :true, :title => "Smile", :class => ("hoverable") do
          = rels["in-likes-me"].nil? ? "Smile" : "Not smile"
        = link_to dummy_path(discussion,'Discussion','likes'), :method => :post, :remote => :true, :title => "Share", :class => ("hoverable") do
          = "Share"
        = link_to onerel_path(discussion,'Discussion','preferes'), :method => :post, :remote => :true, :title => "Preferreds", :class => ("hoverable") do
          = rels["in-preferes-me"].nil? ? "Preferred" : "Not preferred"
        
      .command-line-s.to-right
        - puts (rels)
        = link_to subjects_list_path('Discussion',discussion.uuid,'likes'), :remote => :true, :title => "Likes", :class => ("hoverable") do
          %i.hoverable.im-like
          = rels["in-likes-Subject"].nil? ? 0 : rels["in-likes-Subject"]
        = link_to subjects_list_path('Discussion',discussion.uuid,'shares'), :remote => :true, :title => "Shares", :class => ("hoverable") do
          %i.hoverable.im-share2
          = rels["in-follows-Subject"].nil? ? 0 : rels["out-follows-Subject"]
        = link_to subjects_list_path('Discussion',discussion.uuid,'preferes'), :remote => :true, :title => "Preferreds", :class => ("hoverable") do
          %i.hoverable.im-bookmarks
          = rels["in-preferes-Subject"].nil? ? 0 : rels["in-preferes-Subject"]
    .spacer-2x

    .border-1
    = render partial: "discussion_comments/form", locals: { discussion_comment: DiscussionComment.new, parent_class: "Discussion", parent_uuid: discussion.uuid }

    -# *********************************** DISCUSSION COMMENT LINE ****************************************** 

    -# query_string = "(g:Discussion { uuid : '#{discussion.uuid}' })-[dc:has_comment]->(discussion_comment:DiscussionComment) return discussion_comment order by discussion_comment.created_at desc limit 2"
    -# has_comment = Neo4j::Session.query.match(query_string).proxy_as(DiscussionComment, :discussion_comment)

    - comments = discussion.has_comment.all.order(created_at:  :desc).limit(2)
  
    - comments.each do |rel|
      = render partial: "discussion_comments/show", locals: { discussion_comment: rel, parent_class: "Discussion", parent_uuid: discussion.uuid }

    .border-1
    .command-line-m
      - if can_modify?(discussion)
        = link_to edit_discussion_path(discussion), :remote => :true, :hide_label => :true, "data-placement" => :top, :title => "Modify the element" do
          %i.im-pencil
        = link_to discussion, :method => :delete, :data => { :confirm => 'Are you sure?' }, :remote => :true, :hide_label => :true, "data-placement" => :top, :title => "Delete the element" do
          %i.im-bin
